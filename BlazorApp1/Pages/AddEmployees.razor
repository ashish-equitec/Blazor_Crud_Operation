@page "/addemployee"
@using BlazorApp1.Data
@using BlazorApp1.Models
@inject EmployeeService EmployeeService
@inject NavigationManager NavigationManager
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
<div class="container mt-5">
    <h4>ADD NEW EMPLOYEE</h4>
    <pre>    </pre>
    <EditForm Model="@emp"  OnValidSubmit="AddEmployee">
        <div class="form-row">
            <div class="form-group col-md-4">
                <label for="name">Name</label>
                <InputText class="form-control" id="name" placeholder="Name" @bind-Value="emp.Name" required />
                <ValidationMessage For="@(() => emp.Name)" />
            </div>

            <div class="form-group col-md-4">
                <label for="dob">DOB</label>
                <InputText class="form-control" id="dob" placeholder="dd/mm/yyyy" @bind-Value="emp.DOB" required />
                <ValidationMessage For="@(() => emp.DOB)" />
            </div>
            <div class="form-group col-md-4">
                <label for="Location">Location</label>
                <InputText class="form-control" id="Location" placeholder="Location" @bind-Value="emp.Location" required />
                <ValidationMessage For="@(() => emp.Location)" />
            </div>
            <div class="form-group col-md-4">
                <label for="Designation">Designation</label>
                <InputText class="form-control" id="Designation" placeholder="Designation" @bind-Value="emp.Designation" required />
                <ValidationMessage For="@(() => emp.Designation)" />
            </div>
            <div class="form-group col-md-4">
                <label for="Email_Address">Email_Address</label>
                <InputText class="form-control" id="dob" placeholder="abc123@gmail.com" @bind-Value="emp.Email_Address" required />
                <ValidationMessage For="@(() => emp.Email_Address)" />
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    <label for="gender">Gender</label>
                    <select class="form-control" id="gender" @bind="emp.Gender" required>
                        <option value="" disabled selected>-- Select --</option>
                        <option value="Male">Male</option>
                        <option value="Female">Female</option>
                        <option value="Other">Other</option>
                    </select>
                </div>
            </div>
            <div class="form-group col-md-12 text-center">
                <label>Skills</label>
                <div class="form-check form-check-inline">
                    @foreach (var skill in presentSkills)
                    {
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="@($"sk{skill.Id}")"
                                   checked="@SkillId.Contains(skill.Id)"
                                   @onchange="@(e => BoxSkills(skill.Id))" />
                            <label class="form-check-label" for="@($"sk{skill.Id}")">@skill.Skills</label>
                        </div>
                    }
                </div>
            </div>
            <div class="form-group col-md-12">
                <button type="submit" class="btn btn-success" >ADD</button>
            </div>
        </div>
    </EditForm>
    <button type="submit" class="btn btn-info" @onclick="backtolist">Back To List</button>
</div>

@code {
    EmployeeViewResult emp = new EmployeeViewResult();
    private async Task AddEmployee()
    {
        int newEmployee1 = await EmployeeService.AddEmployeeAsync(emp.Name, emp.DOB, emp.Location, emp.Designation, emp.Email_Address, emp.Gender, SkillId);
        NavigationManager.NavigateTo("/employeedb");
    }
    public void backtolist()
    {
        NavigationManager.NavigateTo("/employeedb");
    }

    private List<GetSkilsResult> presentSkills = new List<GetSkilsResult>();
    private List<int> SkillId = new List<int>();

    protected override async Task OnInitializedAsync()
    {
        presentSkills = await EmployeeService.GetSkils();
    }

    private void BoxSkills(int skillId)
    {
        if (SkillId.Contains(skillId))
            SkillId.Remove(skillId);
        else
            SkillId.Add(skillId);
    }
}