@page "/employeedblistdetails"
@using BlazorApp1.Data
@using BlazorApp1.Models
@inject EmployeeService emp
@inject NavigationManager NavigationManager

<PageTitle>Employee Data</PageTitle>
<pre>   </pre>
<div class="text-center">
    <h4>EMPLOYEE DATA</h4>
</div>

<br />

<div class="table-responsive">
    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th style="background-color: #9b59b6; color: #fff;">ID</th>
                <th style="background-color: #3498db; color: #fff;">NAME</th>
                <th style="background-color: #e74c3c; color: #fff;">DOB</th>
                <th style="background-color: #2ecc71; color: #fff;">LOCATION</th>
                <th style="background-color: #f39c12; color: #fff;">DESIGNATION</th>
                <th style="background-color: #9b59b6; color: #fff;">EMAIL ID</th>
                <th style="background-color: #e67e22; color: #fff;">GENDER</th>
                <th style="background-color: #e74c3c; color: #fff;">SKILLS</th>
                <th style="background-color: #2ecc71; color: #fff;">ACTION</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in employee)
            {
                <tr>
                    <td>@employee.ID</td>
                    <td>@employee.Name</td>
                    <td>@employee.DOB</td>
                    <td>@employee.Location</td>
                    <td>@employee.Designation</td>
                    <td>@employee.Email_Address</td>
                    <td>@employee.Gender</td>
                    <td>@result[employee.ID]</td>
                    <td>
                        @* <button class="btn btn-outline-success" @onclick="() => NavigateToEditEmployee(employee.ID)">Edit Records</button> *@
                        <button class="btn btn-warning" @onclick="() => NavigateToDelete(employee.ID)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
@code
{
    List<EmployeeViewResult> employee = new();
    List<GetEmployeeSkillsResult>? employeeSkills;
    public Dictionary<int, string> result = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            employee = await emp.ExecuteStoredProcedureAsync();

            foreach (var item in employee)
            {
                employeeSkills = await emp.SkillsName(item.ID);

                var userSkills = employeeSkills
                    .Where(skill => skill.EmployeeId == item.ID)
                    .Select(skill => skill.Skills)
                    .ToList();

                var skillsString = string.Join(", ", userSkills);

                result[item.ID] = skillsString;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
        }
    }
    public void NavigateToAddEmployee()
    {
        NavigationManager.NavigateTo("/addemployee");
    }
    public void NavigateToEditEmployee(int id)
    {
        NavigationManager.NavigateTo($"/editemployee/{id}");
    }
    public void NavigateToDelete(int id)
    {
        NavigationManager.NavigateTo($"/deleteemployee/{id}");
    }
    public void NavigateToSoft()
    {
        NavigationManager.NavigateTo($"/softdelete");
    }
}